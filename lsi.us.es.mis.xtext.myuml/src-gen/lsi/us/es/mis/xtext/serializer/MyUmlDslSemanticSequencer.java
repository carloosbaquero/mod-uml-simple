/*
 * generated by Xtext 2.30.0
 */
package lsi.us.es.mis.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import lsi.us.es.mis.xtext.myUmlDsl.Attribute;
import lsi.us.es.mis.xtext.myUmlDsl.Cardinality;
import lsi.us.es.mis.xtext.myUmlDsl.Entity;
import lsi.us.es.mis.xtext.myUmlDsl.MyUmlDslPackage;
import lsi.us.es.mis.xtext.myUmlDsl.Relationship;
import lsi.us.es.mis.xtext.myUmlDsl.Uml;
import lsi.us.es.mis.xtext.services.MyUmlDslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyUmlDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyUmlDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyUmlDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyUmlDslPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case MyUmlDslPackage.CARDINALITY:
				sequence_Cardinality(context, (Cardinality) semanticObject); 
				return; 
			case MyUmlDslPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case MyUmlDslPackage.RELATIONSHIP:
				sequence_Relationship(context, (Relationship) semanticObject); 
				return; 
			case MyUmlDslPackage.UML:
				sequence_Uml(context, (Uml) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=PrimitiveType)
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUmlDslPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUmlDslPackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, MyUmlDslPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUmlDslPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypePrimitiveTypeEnumRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Cardinality returns Cardinality
	 *
	 * Constraint:
	 *     (min=INT max=MaxValue)
	 * </pre>
	 */
	protected void sequence_Cardinality(ISerializationContext context, Cardinality semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUmlDslPackage.Literals.CARDINALITY__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUmlDslPackage.Literals.CARDINALITY__MIN));
			if (transientValues.isValueTransient(semanticObject, MyUmlDslPackage.Literals.CARDINALITY__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUmlDslPackage.Literals.CARDINALITY__MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCardinalityAccess().getMinINTTerminalRuleCall_1_0(), semanticObject.getMin());
		feeder.accept(grammarAccess.getCardinalityAccess().getMaxMaxValueParserRuleCall_3_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute*)
	 * </pre>
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Relationship returns Relationship
	 *
	 * Constraint:
	 *     (source=[Entity|ID] target=[Entity|ID] role=STRING cardinality=Cardinality)
	 * </pre>
	 */
	protected void sequence_Relationship(ISerializationContext context, Relationship semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUmlDslPackage.Literals.RELATIONSHIP__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUmlDslPackage.Literals.RELATIONSHIP__SOURCE));
			if (transientValues.isValueTransient(semanticObject, MyUmlDslPackage.Literals.RELATIONSHIP__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUmlDslPackage.Literals.RELATIONSHIP__TARGET));
			if (transientValues.isValueTransient(semanticObject, MyUmlDslPackage.Literals.RELATIONSHIP__ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUmlDslPackage.Literals.RELATIONSHIP__ROLE));
			if (transientValues.isValueTransient(semanticObject, MyUmlDslPackage.Literals.RELATIONSHIP__CARDINALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUmlDslPackage.Literals.RELATIONSHIP__CARDINALITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationshipAccess().getSourceEntityIDTerminalRuleCall_0_0_1(), semanticObject.eGet(MyUmlDslPackage.Literals.RELATIONSHIP__SOURCE, false));
		feeder.accept(grammarAccess.getRelationshipAccess().getTargetEntityIDTerminalRuleCall_2_0_1(), semanticObject.eGet(MyUmlDslPackage.Literals.RELATIONSHIP__TARGET, false));
		feeder.accept(grammarAccess.getRelationshipAccess().getRoleSTRINGTerminalRuleCall_4_0(), semanticObject.getRole());
		feeder.accept(grammarAccess.getRelationshipAccess().getCardinalityCardinalityParserRuleCall_5_0(), semanticObject.getCardinality());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Uml returns Uml
	 *
	 * Constraint:
	 *     ((entities+=Entity+ relationships+=Relationship+) | relationships+=Relationship+)?
	 * </pre>
	 */
	protected void sequence_Uml(ISerializationContext context, Uml semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
